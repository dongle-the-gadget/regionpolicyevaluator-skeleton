// Bindings generated by `windows-bindgen` 0.58.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]
pub mod Internal {
    pub mod System {
        pub mod Profile {
            windows_core::imp::define_interface!(
                IRegionPolicyEvaluatorStatics,
                IRegionPolicyEvaluatorStatics_Vtbl,
                0x1ca20398_c1d9_5f12_b40a_6528206e3b5e
            );
            impl windows_core::RuntimeType for IRegionPolicyEvaluatorStatics {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::for_interface::<Self>();
            }
            #[repr(C)]
            pub struct IRegionPolicyEvaluatorStatics_Vtbl {
                pub base__: windows_core::IInspectable_Vtbl,
                pub EvaluatePolicyState: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    windows_core::GUID,
                    *mut PolicyState,
                )
                    -> windows_core::HRESULT,
                pub ForceEvaluatePolicyState: unsafe extern "system" fn(
                    *mut core::ffi::c_void,
                    windows_core::GUID,
                    *mut PolicyState,
                )
                    -> windows_core::HRESULT,
            }
            pub struct RegionPolicyEvaluator;
            impl RegionPolicyEvaluator {
                pub fn EvaluatePolicyState(
                    policy: windows_core::GUID,
                ) -> windows_core::Result<PolicyState> {
                    Self::IRegionPolicyEvaluatorStatics(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).EvaluatePolicyState)(
                            windows_core::Interface::as_raw(this),
                            policy,
                            &mut result__,
                        )
                        .map(|| result__)
                    })
                }
                pub fn ForceEvaluatePolicyState(
                    policy: windows_core::GUID,
                ) -> windows_core::Result<PolicyState> {
                    Self::IRegionPolicyEvaluatorStatics(|this| unsafe {
                        let mut result__ = core::mem::zeroed();
                        (windows_core::Interface::vtable(this).ForceEvaluatePolicyState)(
                            windows_core::Interface::as_raw(this),
                            policy,
                            &mut result__,
                        )
                        .map(|| result__)
                    })
                }
                #[doc(hidden)]
                pub fn IRegionPolicyEvaluatorStatics<
                    R,
                    F: FnOnce(&IRegionPolicyEvaluatorStatics) -> windows_core::Result<R>,
                >(
                    callback: F,
                ) -> windows_core::Result<R> {
                    static SHARED: windows_core::imp::FactoryCache<
                        RegionPolicyEvaluator,
                        IRegionPolicyEvaluatorStatics,
                    > = windows_core::imp::FactoryCache::new();
                    SHARED.call(callback)
                }
            }
            impl windows_core::RuntimeName for RegionPolicyEvaluator {
                const NAME: &'static str = "Windows.Internal.System.Profile.RegionPolicyEvaluator";
            }
            #[repr(transparent)]
            #[derive(PartialEq, Eq, Copy, Clone, Default)]
            pub struct PolicyState(pub i32);
            impl PolicyState {
                pub const Unknown: Self = Self(0i32);
                pub const Enabled: Self = Self(1i32);
                pub const Disabled: Self = Self(2i32);
            }
            impl windows_core::TypeKind for PolicyState {
                type TypeKind = windows_core::CopyType;
            }
            impl core::fmt::Debug for PolicyState {
                fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
                    f.debug_tuple("PolicyState").field(&self.0).finish()
                }
            }
            impl windows_core::RuntimeType for PolicyState {
                const SIGNATURE: windows_core::imp::ConstBuffer =
                    windows_core::imp::ConstBuffer::from_slice(
                        b"enum(Windows.Internal.System.Profile.PolicyState;i4)",
                    );
            }
            pub trait IRegionPolicyEvaluatorStatics_Impl: Sized {
                fn EvaluatePolicyState(
                    &self,
                    policy: &windows_core::GUID,
                ) -> windows_core::Result<PolicyState>;
                fn ForceEvaluatePolicyState(
                    &self,
                    policy: &windows_core::GUID,
                ) -> windows_core::Result<PolicyState>;
            }
            impl windows_core::RuntimeName for IRegionPolicyEvaluatorStatics {
                const NAME: &'static str =
                    "Windows.Internal.System.Profile.IRegionPolicyEvaluatorStatics";
            }
            impl IRegionPolicyEvaluatorStatics_Vtbl {
                pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
                ) -> IRegionPolicyEvaluatorStatics_Vtbl
                where
                    Identity: IRegionPolicyEvaluatorStatics_Impl,
                {
                    unsafe extern "system" fn EvaluatePolicyState<
                        Identity: windows_core::IUnknownImpl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        policy: windows_core::GUID,
                        result__: *mut PolicyState,
                    ) -> windows_core::HRESULT
                    where
                        Identity: IRegionPolicyEvaluatorStatics_Impl,
                    {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IRegionPolicyEvaluatorStatics_Impl::EvaluatePolicyState(
                            this,
                            core::mem::transmute(&policy),
                        ) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    unsafe extern "system" fn ForceEvaluatePolicyState<
                        Identity: windows_core::IUnknownImpl,
                        const OFFSET: isize,
                    >(
                        this: *mut core::ffi::c_void,
                        policy: windows_core::GUID,
                        result__: *mut PolicyState,
                    ) -> windows_core::HRESULT
                    where
                        Identity: IRegionPolicyEvaluatorStatics_Impl,
                    {
                        let this: &Identity =
                            &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                        match IRegionPolicyEvaluatorStatics_Impl::ForceEvaluatePolicyState(
                            this,
                            core::mem::transmute(&policy),
                        ) {
                            Ok(ok__) => {
                                result__.write(core::mem::transmute_copy(&ok__));
                                windows_core::HRESULT(0)
                            }
                            Err(err) => err.into(),
                        }
                    }
                    Self {
                        base__: windows_core::IInspectable_Vtbl::new::<
                            Identity,
                            IRegionPolicyEvaluatorStatics,
                            OFFSET,
                        >(),
                        EvaluatePolicyState: EvaluatePolicyState::<Identity, OFFSET>,
                        ForceEvaluatePolicyState: ForceEvaluatePolicyState::<Identity, OFFSET>,
                    }
                }
                pub fn matches(iid: &windows_core::GUID) -> bool {
                    iid == &<IRegionPolicyEvaluatorStatics as windows_core::Interface>::IID
                }
            }
        }
    }
}
